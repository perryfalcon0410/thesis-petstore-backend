type Subscription {
  newNotification(title: String!): Notification
  #newNotification: Notification
}

extend type Query {
  notifications: [Notification!]!
  countIsRead: Int
}

extend type Mutation {
  createNotification(input: CreateNotificationInput!): NotificationMutation!
  markNotificationAsRead(id: ID!): ID
  deleteNotification(id: ID!): NotificationMutation!
}

type Notification {
  _id: ID!
  title: String!
  type: NotificationType!
  orderId: ID
  reservationId: ID
  order: [Order]
  reservation: [Reservation]
  isRead: Boolean!
  createdAt: DateTime
}

enum NotificationType {
  RESERVATION
  ORDER
}

input CreateNotificationInput {
  title: String!
  type: NotificationType!
  orderId: ID
  reservationId: ID
}

type NotificationMutation {
  success: Boolean!
  msg: String!
  data: Notification
}
